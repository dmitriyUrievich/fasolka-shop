// components/ProductCard.js
import React, { useState, useRef } from 'react';
import '../ProductCard.css';
import { createImageLoader } from '../utils/imageUtils';
import getPortion from '../utils/getPortion';

const capitalizeFirstLetter = (string) =>
  string ? string.charAt(0).toUpperCase() + string.slice(1) : '';

const ProductCard = ({ product, cartItems, addToCart, updateCartQuantity, ageConfirmed, onConfirmAge, isDiscount  }) => {
  const { id, name: rawName, sellPricePerUnit, rests, productType, unit } = product || {};

  const imageLoaderRef = useRef(null);

  // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
  if (!imageLoaderRef.current || imageLoaderRef.current.productId !== id) {
    const hasValidId = id != null && id !== 'undefined' && id !== '';
    if (!hasValidId) {
      imageLoaderRef.current = {
        productId: id,
        getCurrentUrl: () => '/img/fallback.webp',
        handleImageError: () => false,
        isFallback: () => true,
      };
    } else {
      const loader = createImageLoader(id, rawName);
      loader.productId = id;
      imageLoaderRef.current = loader;
    }
  }

  const [imageSrc, setImageSrc] = useState(() => imageLoaderRef.current.getCurrentUrl());

  const containsLighterKeyword = (text) => {
    if (!text) return false;
    const lowerText = text.toLowerCase();
    return lowerText.includes('–∑–∞–∂–∏–≥–∞–ª–∫') || lowerText.includes('–∑–∞–∂–∞–≥–∫');
  };

  const onImageError = () => {
    const loader = imageLoaderRef.current;
    if (loader?.handleImageError) {
      loader.handleImageError();
      const newSrc = loader.getCurrentUrl();
      setImageSrc(newSrc);
    }
  };

  const name = capitalizeFirstLetter(rawName);
  const price = parseFloat(sellPricePerUnit) || 0;
  const disableBuyTypes = ['Tobacco'];
  const ageRestrictedTypes = ['Tobacco', 'LightAlcohol', 'Cigarettes'];
  
  const disableBuy = disableBuyTypes.includes(productType);
  const isAgeRestricted = ageRestrictedTypes.includes(productType) || containsLighterKeyword(rawName);

  const itemInCart = cartItems.find((item) => item.id === id);
  const quantity = itemInCart ? parseFloat(itemInCart.quantityInCart) : 0;
  const total = quantity * price;

  // üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ü–∏—é –¢–û–õ–¨–ö–û –¥–ª—è Kilogram
  const portion = unit === 'Kilogram' ? getPortion(rawName, unit) : null;

  // üîπ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞—Ç–∫–µ ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç unit
  const getRestsMessage = () => {
    const amount = rests;

    if (unit === 'Kilogram') {
      if (amount > 5) return '–¢–æ–≤–∞—Ä–∞ –º–Ω–æ–≥–æ';
      if (amount > 0) return `–û—Å—Ç–∞–ª–æ—Å—å ${parseFloat(amount).toFixed(1)} –∫–≥`;
      return '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏';
    }

    if (amount > 5) return '–û—Å—Ç–∞–ª–æ—Å—å –º–Ω–æ–≥–æ';
    if (amount > 0) return `–û—Å—Ç–∞–ª–æ—Å—å ${Math.floor(amount)} —à—Ç.`;
    return '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏';
  };

  // üîπ –ü–æ–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç unit
  const isWeighted = unit === 'Kilogram';

  // üîπ –î–ª—è –∫–≥: —à–∞–≥ ‚Äî –ø–æ—Ä—Ü–∏—è –∏–ª–∏ 0.1 –∫–≥. –î–ª—è —à—Ç—É–∫ ‚Äî —à–∞–≥ 1.
  const increment = isWeighted && portion
    ? portion.weightInGrams / 1000 // —à–∞–≥ –≤ –∫–≥
    : isWeighted
      ? 0.1 // —à–∞–≥ 100 –≥—Ä–∞–º–º
      : 1;

  const decrement = increment;

  const maxAvailable = isWeighted
    ? rests
    : Math.floor(rests);

  const nextStepAvailable = quantity + increment <= maxAvailable;

  return (
    <div className="product-card">
      <div className="product-card__image-wrapper">
        {isDiscount && (
          <div className="product-card__special-offer">
            <span>–ê–∫—Ü–∏—è</span>
          </div>
        )}
        <img
          src={imageSrc}
          loading="lazy"
          alt={name || '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
          className={`product-card__image ${isAgeRestricted && !ageConfirmed ? 'product-card__image--blur' : ''}`}
          onError={onImageError}
        />
        {isAgeRestricted && !ageConfirmed && (
          <div className="product-card__age-overlay">
            <div className="age-text">–¢–æ–ª—å–∫–æ –¥–ª—è –ª–∏—Ü —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç</div>
          </div>
        )}
      </div>
      <div className="product-card__content">
        <h3 className="product-card__name">{name}</h3>
        {import.meta.env.DEV && <p>{id}</p>}
        <p className="product-card__price">
          {price ? `${price.toLocaleString('ru-RU')} ‚ÇΩ` : '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
        </p>

        {/* üîπ –ü–æ—Ä—Ü–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–≥ */}
        {portion && (
          <p className="product-card__portion">
            <small>–ü–æ—Ä—Ü–∏—è: {portion.portionLabelShort}</small>
          </p>
        )}

        <p className="product-card__quantity">
          {getRestsMessage()}
        </p>

        {isAgeRestricted && !ageConfirmed ? (
          <button className="product-card__button" onClick={onConfirmAge}>
            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç
          </button>
        ) : (
          <>
            {quantity > 0 ? (
              <div className="quantity-control">
                <button
                  className="btn-quantity"
                  aria-label="–£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                  onClick={() => updateCartQuantity(product.id, quantity - decrement)}
                  disabled={quantity === 0}
                >
                  ‚àí
                </button>

                <div className="quantity-info">
                  <div className="quantity">
                    {isWeighted
                      ? `${quantity.toFixed(3)} –∫–≥`
                      : `${Math.round(quantity)} —à—Ç.`}
                  </div>
                  <div className="total-price">{total.toLocaleString('ru-RU')} ‚ÇΩ</div>
                </div>

                  <button
                    className="btn-quantity"
                    aria-label="–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"
                    onClick={() => addToCart(product)}
                    disabled={!nextStepAvailable || disableBuy}
                  >
                    +
                  </button>
                  {(!nextStepAvailable && !disableBuy) && (
                    <span className="tooltip-text">–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç</span>
                  )}
              </div>
            ) : (
              <button
                className="product-card__button"
                disabled={rests === 0 || disableBuy}
                onClick={() => addToCart(product)}
                title={disableBuy ? '–ü–æ–∫—É–ø–∫–∞ –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞' : ''}
              >
                {rests > 0 && !disableBuy ? '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É' : '–¢–æ–ª—å–∫–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ'}
              </button>
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default ProductCard;