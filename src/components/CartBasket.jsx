// src/components/CartBasket.js
import React, { useMemo } from 'react';
import '../CartBasket.css';
import CartBasketItem from './CartBasketItem';

const CartBasket = ({ 
  cartItems = [], 
  removeFromCart, 
  onClearCart, 
  updateCartQuantity, 
  onClose, 
  onProceedToOrder 
}) => {
  // –®–∞–≥ 1: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å—É–º–º—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
  const { subtotal, reserveAmount, hasWeightedItems } = useMemo(() => {
    let calculatedSubtotal = 0;
    let calculatedReserve = 0;
    const weighted = cartItems.some(item => item.unit === 'Kilogram');

    cartItems.forEach(item => {
      const itemTotal = (item.sellPricePerUnit || 0) * item.quantityInCart;
      calculatedSubtotal += itemTotal;
      if (item.unit === 'Kilogram') {
        calculatedReserve += itemTotal * 0.15;
      }
    });

    return {
      subtotal: calculatedSubtotal,
      reserveAmount: calculatedReserve,
      hasWeightedItems: weighted,
    };
  }, [cartItems]);

 // –®–∞–≥ 2: –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–µ–¥–µ—Ç—Å—è –æ—Ç –†–ï–ê–õ–¨–ù–û–ô —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤ (subtotal)
  const deliveryInfo = useMemo(() => {
    if (subtotal < 10) {
      return { cost: null, text: '–æ—Ç 1000 ‚ÇΩ', showFreeHint: false };
    }
    if (subtotal >= 3000) {
      return { cost: 0, text: '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ üéÅ', showFreeHint: false };
    }
    return { cost: 200, text: '200 ‚ÇΩ', showFreeHint: true };
  }, [subtotal]);

  // –®–∞–≥ 3: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–∫–ª—é—á–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤
  const { cost: deliveryCost, text: deliveryText, showFreeHint } = deliveryInfo;
  const isOrderValid = deliveryCost !== null;
  const totalWithReserve = isOrderValid ? subtotal + reserveAmount : 0 //+ deliveryCost : 0;

  return (
    <div className="cart-container">
      <div className="cart-header">
        <h2>–í–∞—à –∑–∞–∫–∞–∑ üõí</h2>
        <button className="cart-close-button" onClick={onClose} aria-label="–ó–∞–∫—Ä—ã—Ç—å –∫–æ—Ä–∑–∏–Ω—É">
          &times;
        </button>
      </div>

      <button
        className="cart-clear-button"
        onClick={onClearCart}
        disabled={cartItems.length === 0}
        title={cartItems.length === 0 ? '–ö–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞' : '–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É'}
      >
        –û—á–∏—Å—Ç–∏—Ç—å
      </button>

      {cartItems.length === 0 ? (
        <p className="cart-empty-message">–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.</p>
      ) : (
        <div className="cart-items-list">
          {cartItems.map((item) => (
            <CartBasketItem
              key={item.id}
              item={item}
              removeFromCart={removeFromCart}
              updateCartQuantity={updateCartQuantity}
            />
          ))}
        </div>
      )}

      <div className="cart-summary">
        <p className="cart-subtotal">
          –¢–æ–≤–∞—Ä—ã: <span>{subtotal.toLocaleString('ru-RU', { minimumFractionDigits: 2 })} ‚ÇΩ</span>
        </p>

        <p className={`cart-delivery-info ${!isOrderValid ? 'cart-delivery-info--warning' : ''}`}>
          üöö –î–æ—Å—Ç–∞–≤–∫–∞: <span>{deliveryText}</span>
        </p>
        
        {/* –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–µ—Å–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ */}
        {hasWeightedItems && (
          <p className="cart-reserve-info">
            –†–µ–∑–µ—Ä–≤ –∑–∞ –≤–µ—Å (+15%): <span>+{reserveAmount.toLocaleString('ru-RU', { minimumFractionDigits: 2 })} ‚ÇΩ</span>
          </p>
        )}

        {showFreeHint && (
          <p className="cart-delivery-hint">
            üí° –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë –Ω–∞{' '}
            <strong>{(3000 - subtotal).toLocaleString('ru-RU')} ‚ÇΩ</strong>,{' '}
            —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å <strong>–±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É</strong>!
          </p>
        )}
        
        {/* –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç-–ø–æ—è—Å–Ω–µ–Ω–∏–µ */}
        {hasWeightedItems && (
            <div className="cart-warning-message" style={{ /* —Å—Ç–∏–ª–∏ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ CSS */ }}>
                –ú—ã —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —ç—Ç—É —Å—É–º–º—É –¥–ª—è –≤–µ—Å–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å 
                –∑–∞–ø–∞—Å–æ–º. –ü–æ—Å–ª–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏—è —Å –∫–∞—Ä—Ç—ã —Å–ø–∏—à–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å.
            </div>
        )}

        {isOrderValid && (
          <p className="cart-total">
            {hasWeightedItems ? '–ò—Ç–æ–≥–æ –∫ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—é' : '–ò—Ç–æ–≥–æ'}: <span>{totalWithReserve.toLocaleString('ru-RU', { minimumFractionDigits: 2 })} ‚ÇΩ</span>
          </p>
        )}

        <button
          className="cart-checkout-button"
          disabled={!isOrderValid}
          onClick={isOrderValid ? onProceedToOrder : undefined}
        >
          {subtotal < 1000 ? `–ï—â—ë ${(1000 - subtotal).toFixed()} ‚ÇΩ –¥–æ –∑–∞–∫–∞–∑–∞` : '–î–∞–ª–µ–µ'}
        </button>
      </div>
    </div>
  );
};

// üîπ –î–æ–±–∞–≤–ª—è–µ–º memo
export default React.memo(CartBasket, (prevProps, nextProps) => {
  return (
    prevProps.cartItems.length === nextProps.cartItems.length &&
    prevProps.cartItems.every((item, i) =>
      item.id === nextProps.cartItems[i]?.id &&
      item.quantityInCart === nextProps.cartItems[i]?.quantityInCart &&
      item.rests === nextProps.cartItems[i]?.rests
    ) &&
    prevProps.onProceedToOrder === nextProps.onProceedToOrder
  );
});