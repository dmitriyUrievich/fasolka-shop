// src/components/CategorySidebar.jsx
import React, { useState, useEffect } from 'react';
import '../CategorySidebar.css';

const CategorySidebar = ({ categories, products, activeCategoryId, onCategorySelect }) => {
  const [expandedCategories, setExpandedCategories] = useState(new Set());

  // ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç undefined
  const categoryList = Array.isArray(categories) ? categories : [];
  const validProducts = Array.isArray(products) ? products : [];

  // üîç –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –æ—Å—Ç–∞—Ç–∫–æ–º > 0
  const productsInStock = validProducts.filter(p => {
    const quantity = p.rests|| 0;
    return quantity > 0;
  });

  // üîç –°–æ–∑–¥–∞—ë–º Set —Å groupId —Ç–æ–ª—å–∫–æ —Ç–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤ –Ω–∞–ª–∏—á–∏–∏
  const productGroupIds = new Set(
    productsInStock.filter(p => p.groupId).map(p => p.groupId)
  );
console.log('productsInStock',productsInStock)
  // üßπ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —É–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const isBlacklisted = (name) =>
    [
      '–û–ë–û–†–£–î–û–í–ê–ù–ò–ï',
      '–í–æ–¥–∞ 19–ª',
      '–ü–ò–ö–ù–ò–ö',
      '–•–û–õ–û–î–ù–´–ô –ß–ê–ô',
      '–ë–µ–∑ –≥—Ä—É–ø–ø—ã',
      '–ü–∞—Å—Ö–∞',
    ].some(word => name.includes(word) || word === name);

  const filteredCategories = categoryList
    .filter(group => group.name && !isBlacklisted(group.name))
    .filter(group => productGroupIds.has(group.id)); // —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –Ω–∞–ª–∏—á–∏–∏

  // üîç –°—á—ë—Ç—á–∏–∫–∏: —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–æ–º > 0
  const productCountByGroupId = new Map();
  let totalCount = 0;

  productsInStock.forEach(p => {
    if (p.groupId && productGroupIds.has(p.groupId)) {
      const count = productCountByGroupId.get(p.groupId) || 0;
      productCountByGroupId.set(p.groupId, count + 1);
      totalCount++;
    }
  });

  const getProductCount = (id) => productCountByGroupId.get(id) || 0;

  // üå≤ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞
  const categoryMap = new Map();
  const rootCategories = [];

  filteredCategories.forEach(cat => {
    categoryMap.set(cat.id, { ...cat, children: [] });
  });

  filteredCategories.forEach(cat => {
    if (cat.parentId && categoryMap.has(cat.parentId)) {
      categoryMap.get(cat.parentId).children.push(categoryMap.get(cat.id));
    } else {
      rootCategories.push(categoryMap.get(cat.id));
    }
  });

  const topLevel = rootCategories.sort((a, b) => a.name.localeCompare(b.name));

  // üé® –ò–∫–æ–Ω–∫–∏ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å ‚Äî —Å–º. –Ω–∏–∂–µ)
  const getIcon = (name) => {
    const iconMap = {
      '–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è': 'üç∞',
      '–ù–∞–ø–∏—Ç–∫–∏': 'ü•§',
      '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã': 'ü•õ',
      '–•–ª–µ–± –∏ —Ö–ª–µ–±–æ–±—É–ª–æ—á–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è': 'üçû',
      '–§—Ä—É–∫—Ç—ã': 'üçé',
      '–û–≤–æ—â–∏': 'ü•¶',
      '–ú—è—Å–æ, —Ä—ã–±–∞, –ø—Ç–∏—Ü–∞': 'ü•©',
      '–†—ã–±–∞ –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã': 'üêü',
      '–ü—Ç–∏—Ü–∞': 'üçó',
      '–ö–æ–ª–±–∞—Å—ã': 'üå≠',
      '–ö–æ–Ω—Å–µ—Ä–≤—ã': 'ü•´',
      '–ë–∞–∫–∞–ª–µ—è': 'ü•ú',
      '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞': 'üè†',
      '–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–µ—Ç–µ–π': 'üë∂',
      '–ê–ª–∫–æ–≥–æ–ª—å': 'üç∑',
      '–í–æ–¥–∞': 'üíß',
      '–°–æ–∫–∏': 'üçπ',
      '–ì–∞–∑–∏—Ä–æ–≤–∫–∞': 'ü•§',
      '–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã': '‚ùÑÔ∏è',
      '–Ø–π—Ü–æ': 'ü•ö',
      '–°—ã—Ä—ã': 'üßÄ',
      '–°–ø–µ—Ü–∏–∏': 'üå∂Ô∏è',
      '–ß–∞–π/–∫–æ—Ñ–µ': '‚òï',
      '–ö–æ—Ä–º –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö': 'üêæ',
    };
    return iconMap[name] || 'üè∑Ô∏è';
  };

  // ‚úÖ –ê–≤—Ç–æ—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  useEffect(() => {
    const activeParentId = activeCategoryId
      ? categoryList.find(cat => cat.id === activeCategoryId)?.parentId
      : null;

    const newExpanded = new Set();
    if (activeParentId) {
      newExpanded.add(activeParentId);
    }
    setExpandedCategories(newExpanded);
  }, [activeCategoryId]);

  // üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –≥–ª–∞–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleParentClick = (parentId) => {
    onCategorySelect(parentId);

    const newExpanded = new Set(expandedCategories);
    if (newExpanded.has(parentId)) {
      newExpanded.delete(parentId);
    } else {
      newExpanded.add(parentId);
    }
    setExpandedCategories(newExpanded);
  };

  // üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleChildClick = (childId) => {
    onCategorySelect(childId);
  };

  // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const isActive = (id) => id === activeCategoryId;

  return (
    <div className="category-sidebar">
      {/* –í—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —Å—á—ë—Ç—á–∏–∫–æ–º (—Ç–æ–ª—å–∫–æ –≤ –Ω–∞–ª–∏—á–∏–∏) */}
      <div
        className={`category-item ${!activeCategoryId ? 'active' : ''}`}
        onClick={() => {
          onCategorySelect(null);
          setExpandedCategories(new Set());
        }}
      >
        <span>
          <span className="icon">üõí</span>
          <span>–í—Å–µ —Ç–æ–≤–∞—Ä—ã</span>
          <span className="count">({totalCount})</span>
        </span>
      </div>

      {/* –ì–ª–∞–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
      {topLevel.map(parent => (
        <React.Fragment key={parent.id}>
          {/* –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è */}
          <div
            className={`category-item ${isActive(parent.id) ? 'active' : ''}`}
            onClick={() => handleParentClick(parent.id)}
          >
            <span>
              <span className="icon">{getIcon(parent.name)}</span>
              <span>{parent.name}</span>
              <span className="count">({getProductCount(parent.id)})</span>
            </span>
            <span className={`arrow ${expandedCategories.has(parent.id) ? 'open' : ''}`}>‚ñ∂</span>
          </div>

          {/* –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          {parent.children.length > 0 && expandedCategories.has(parent.id) && (
            <ul className="sub-category-list">
              {parent.children.map(child => (
                <li
                  key={child.id}
                  className={`sub-category-item ${isActive(child.id) ? 'active' : ''}`}
                  onClick={(e) => {
                    e.stopPropagation();
                    handleChildClick(child.id);
                  }}
                >
                  <span>
                    <span className="icon">{getIcon(child.name)}</span>
                    <span>{child.name}</span>
                    <span className="count">({getProductCount(child.id)})</span>
                  </span>
                </li>
              ))}
            </ul>
          )}
        </React.Fragment>
      ))}
    </div>
  );
};

export default CategorySidebar;