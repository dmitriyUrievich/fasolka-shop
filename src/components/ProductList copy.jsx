// ProductList.js (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏)
import React, { useState, useEffect, useMemo } from 'react';
import ProductCard from './ProductCard';
import Pagination from './Pagination';
import Map from './Map';
import { fetchProductsWithRests } from '../services/konturMarketApi';
import '../ProductList.css';

// üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞
const CACHE_KEY = 'products_cache_v3';
const CACHE_TTL = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

const ProductList = ({ searchTerm, sortOption, addToCart, cartItems, updateCartQuantity }) => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 24;
  const storageKey = 'ageConfirmedGlobal';
  const [productsWithoutImage, setProductsWithoutImage] = useState(new Set());

  const [ageConfirmed, setAgeConfirmed] = useState(() => localStorage.getItem(storageKey) === 'true');

  const handleConfirmAge = () => {
    setAgeConfirmed(true);
    localStorage.setItem(storageKey, 'true');
  };

  useEffect(() => {
    const saved = localStorage.getItem(storageKey);
    if (saved === 'true') setAgeConfirmed(true);
  }, []);

  useEffect(() => {
    const loadProducts = async () => {
      // üîπ –ü–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ –∫—ç—à–∞
      const cached = localStorage.getItem(CACHE_KEY);
      if (cached) {
        try {
          const { data, timestamp } = JSON.parse(cached);
          if (Date.now() - timestamp < CACHE_TTL) {
            setProducts(data);
            setLoading(false);
            return;
          }
        } catch (e) {
          console.warn('–ö—ç—à –ø–æ–≤—Ä–µ–∂–¥—ë–Ω');
        }
      }

      // üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
      try {
        setLoading(true);
        setError(null);
        const data = await fetchProductsWithRests();
        localStorage.setItem(CACHE_KEY, JSON.stringify({
          data,
          timestamp: Date.now()
        }));
        setProducts(data);
      } catch (err) {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    loadProducts();
  }, []);

// üü© –•—Ä–∞–Ω–∏–º ID —Ç–æ–≤–∞—Ä–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback (–Ω–µ—Ç —Ñ–æ—Ç–æ)
    const handleImageStatus = (productId, hasNoImage) => {
    setProductsWithoutImage(prev => {
      const newSet = new Set(prev);
      if (hasNoImage) {
        newSet.add(productId);
      } else {
        newSet.delete(productId);
      }
      return newSet;
    });
  };

  // üîπ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)
  const filteredProducts = useMemo(() => {
    return products.filter(product => {
      if (!product) return false;
      const matchesSearch = searchTerm
        ? product.name.toLowerCase().includes(searchTerm.toLowerCase())
        : true;
      return matchesSearch && product.rests > 0;
    });
  }, [products, searchTerm]);

  // üü® –ü–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ñ–æ—Ç–æ
    const getProductsMissingImage = () => {
    return products.filter(p => productsWithoutImage.has(p.id));
  };




  const sortedProducts = useMemo(() => {
    return [...filteredProducts].sort((a, b) => {
      switch (sortOption) {
        case 'price-asc': return a.sellPricePerUnit - b.sellPricePerUnit;
        case 'price-desc': return b.sellPricePerUnit - a.sellPricePerUnit;
        case 'quantity-asc': return a.rests - b.rests;
        case 'quantity-desc': return b.rests - a.rests;
        default: return 0;
      }
    });
  }, [filteredProducts, sortOption]);

  // üîπ –°–±—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –ø–æ–∏—Å–∫–µ/—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ
  useEffect(() => {
    setCurrentPage(1);
  }, [searchTerm, sortOption]);

  // üîπ –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = sortedProducts.slice(indexOfFirstItem, indexOfLastItem);

  const paginate = (pageNumber) => setCurrentPage(pageNumber);

  if (loading) {
    return <div className="status-message loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤...</div>;
  }

  if (sortedProducts.length === 0) {
    return (
      <div className="no-products-message">
        <p>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.</p>
      </div>
    );
  }

  return (
    <>
      <div className="product-list-container">
        <div className="product-grid">
          {currentItems.map(product => (
            <ProductCard
              key={product.id}
              product={product}
              addToCart={addToCart}
              ageConfirmed={ageConfirmed}
              onConfirmAge={handleConfirmAge}
              cartItems={cartItems}
              updateCartQuantity={updateCartQuantity}
            />
          ))}
        </div>

        <div className="pagination-footer">
          <Pagination
            itemsPerPage={itemsPerPage}
            totalItems={sortedProducts.length}
            paginate={paginate}
            currentPage={currentPage}
          />
        </div>
      </div>

      <div className="map-section">
        <h2 className="map-title">–ù–∞—à –ú–∞–≥–∞–∑–∏–Ω –Ω–∞ –ö–∞—Ä—Ç–µ</h2>
        <Map
          center={[44.675898, 37.642492]}
          zoom={12}
          placemark={[44.675898, 37.642492]}
          placemarkHint="–§–∞—Å–æ–ª—å–∫–∞ - –§–µ—Ä–º–µ—Ä—Å–∫–∏–π –†—ã–Ω–æ–∫"
          placemarkBalloon="–°–≤–µ–∂–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –æ—Ç –º–µ—Å—Ç–Ω—ã—Ö —Ñ–µ—Ä–º–µ—Ä–æ–≤!"
        />
      </div>
    </>
  );
};

export default React.memo(ProductList);